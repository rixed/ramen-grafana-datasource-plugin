{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","since","range","from","valueOf","until","to","max_data_points","maxDataPoints","timeseries","targets","filter","t","hide","node","data_field","select_y","map","replace","id","consolidation","spec","Predefined","operation","select_x","where","NewTempNode","when","data","doRequest","method","then","response","status","target","ts","datapoints","times","entries","i","values","sort","_v1","t1","_v2","t2","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","interpolated","prefix","only_exporting","mapToTextValue","text","d","value","test","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  /* We must perform everything in a single query:\n   * - request all the predefined timeseries\n   * - create (or update) a temporary, anonymous function with the given operation\n   * - add its exported time series into the result.\n   *\n   * It is probably easier to just send everything we have to ramen and leave\n   * it to it to construct the operation etc. rather than try to do this from this\n   * grafana plugin.\n   * Bigger problem is: when do we delete those programs? If they are cheap to create\n   * and have no (or not much) history then we can probably delete them after a few\n   * minutes we haven't been requested their data.\n   * Maybe we could have a longer timeout for group-bys for instance, but anything\n   * more persistent must fall into the 'predefined' category.\n   *\n   * So, ramen will first have to name the operation, for instance according to a hash\n   * of the operation+from (at least we want to avoid creating a new program each time\n   * a client ask for the timeserie, esp since it involves compiling!)\n   * Then it create the program and the operation, with a 'temporary' flag, and\n   * record in the export table each time a timeserie is requested.\n   * A distinct thread can then yank the unused temporary programs.\n   */\n  query(options) {\n    var query = {\n      since: options.range.from.valueOf() * 0.001,\n      until: options.range.to.valueOf() * 0.001,\n      max_data_points: options.maxDataPoints,\n      timeseries: options.targets.filter(t =>\n        !t.hide && (\n          t.type == 'predefined' && t.node && t.data_field ||\n          t.type == 'new' && t.select_y && t.from\n        )\n      ).map(t => {\n        if (t.type == 'predefined') {\n          let node = this.templateSrv.replace(t.node, null, 'regex');\n          let data_field = this.templateSrv.replace(t.data_field, null, 'regex');\n          return {\n            // Id is used for the legend\n            id: node + '(' + data_field + ')',\n            consolidation: t.consolidation,\n            spec: {\n              Predefined: {\n                operation: node,\n                data_field: data_field,\n              }\n            },\n          };\n        } else {\n          let select_x = this.templateSrv.replace(t.select_x, null, 'regex');\n          let select_y = this.templateSrv.replace(t.select_y, null, 'regex');\n          let from = this.templateSrv.replace(t.from, null, 'regex');\n          let where = this.templateSrv.replace(t.where, null, 'regex');\n          return {\n            id: select_x + ',' + select_y + ' FROM ' + from,\n            consolidation: t.consolidation,\n            spec: {\n              NewTempNode: {\n                select_x: select_x,\n                select_y: select_y,\n                from: from,\n                where: where || '',\n              }\n            },\n          };\n        }\n      })\n    };\n\n    if (query.timeseries.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: 'timeseries',\n      data: query,\n      method: 'POST'\n    }).then(response => {\n      if (response.status === 200) {\n        let data = response.data.map(ts => {\n          return {\n            target: ts.id,\n            datapoints: [...ts.times.entries()]\n                        .map(([i, t]) => [ts.values[i], t * 1000])\n                        .sort(([_v1,t1], [_v2,t2]) => t1-t2)\n          };\n        });\n        return { data: data };\n      }\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: 'grafana',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: 'grafana/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  completeNodes(query) {\n    var interpolated = {\n        prefix: this.templateSrv.replace(query, null, 'regex'),\n        only_exporting: true\n    };\n\n    return this.doRequest({\n      url: 'complete/operations',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  completeFields(node, query) {\n    var interpolated = {\n        operation: node,\n        prefix: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: 'complete/fields',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return result.data.sort().map(d => ({ text: d, value: d }));\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    options.url = /\\/$/.test(this.url) ? this.url + options.url : this.url + '/' + options.url;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n}\n"]}